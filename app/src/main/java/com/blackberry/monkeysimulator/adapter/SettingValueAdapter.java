package com.blackberry.monkeysimulator.adapter;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.text.InputType;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.TextView;import com.blackberry.monkeysimulator.R;import com.blackberry.monkeysimulator.entity.MonkeySettings;import com.blackberry.monkeysimulator.tools.CommonTools;import java.lang.reflect.Field;import java.util.List;/** * Created by frlee on 5/30/17. */public class SettingValueAdapter extends ArrayAdapter<String> {    private static MonkeySettings monkeySettingsObj;    private Object settingsNameObj;    private TextView settingsName;    private View oneParaView;    private static String REQUIRED;    private static String settingValue;    private static String OK_BTN;    private static String CANCEL_BTN;    private static String DIALOG_TITLE;    private static String inputValue = "";    private static String emptyReturnValue = "";    private static String connection = " : ";    private static String EVENT_NUMBER_STRING = "event_number";    private static String NO_PARA_WARNING = "No such parameter in Monkey";    private static String NO_ACCESS_WARNING = "Can't access to this parameter currently";    /**     * pre-load from xml file (recommended para values)     */    // General    private static String EVENT_NUMBER;    private static String SEED_NUMBER;    private static String INFORMATION_LEVEL;    // Events    private static String THROTTLE;    private static String PAC_TOUCH;    private static String PAC_MOTION;    private static String PAC_TRACKBALL;    private static String PAC_NAV;    private static String PAC_MAJORNAV;    private static String PAC_SYSKEYS;    private static String PAC_APPSWITCH;    private static String PAC_ANYEVENT;    // Debugging    private static String DBG_NO_EVENT;    private static String HPROF;    private static String IGNORE_CRASHES;    private static String IGNORE_TIMEOUT;    private static String IGNORE_SECURITY_EXCEPTIONS;    private static String KILL_PROCESS_AFTER_ERROR;    private static String MONITOR_NATIVE_CRASHES;    private static String WAIT_DBG;    public MonkeySettings getMonkeySettingsObj() {        return monkeySettingsObj;    }    public static void setMonkeySettingsObj(MonkeySettings monkeySettingsObj) {        SettingValueAdapter.monkeySettingsObj = monkeySettingsObj;    }    public SettingValueAdapter(Context context, int resource, List<String> objects) {        super(context, resource, objects);        REQUIRED = getContext().getResources().getString(R.string.para_required);        OK_BTN = getContext().getResources().getString(R.string.ok_button);        CANCEL_BTN = getContext().getResources().getString(R.string.cancel_button);        DIALOG_TITLE = getContext().getResources().getString(R.string.dialog_title);        // use application scope to reload pare value        monkeySettingsObj = MonkeySettings.getMonkeySettings();        // if application scope object has not event_number value, load value from xml configure file(recommended value).        if(monkeySettingsObj.getEvent_number() == null){            monkeySettingsObj = preLoadRecommendedValue(monkeySettingsObj);        }    }    @Override    public View getView(int position, View convertView, final ViewGroup parent) {        settingsNameObj = getItem(position);        final String settingName = settingsNameObj.toString();        oneParaView = LayoutInflater.from(getContext()).inflate(R.layout.settings_list, parent, false);        settingsName = (TextView) oneParaView.findViewById(R.id.setting_name_field);        settingValue = getSettingValueForObj(settingName, monkeySettingsObj);        if (settingName.equalsIgnoreCase(EVENT_NUMBER_STRING)) {            settingsName.setText(settingName + REQUIRED + settingValue);        } else {            settingsName.setText(settingName + settingValue);        }        settingsName.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                // create a new EditText object inside the onClickListener each time and use setView()                final EditText settingsValue = new EditText(oneParaView.getContext());                // set up a Dialog                AlertDialog.Builder alDia = new AlertDialog.Builder(getContext());                alDia.setView(settingsValue);                alDia.setTitle(DIALOG_TITLE + settingName);                settingsValue.setInputType(InputType.TYPE_CLASS_NUMBER);                //alDia.setIcon(android.settingsValue.drawable.ic_dialog_info);                alDia.setPositiveButton(OK_BTN, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        for (String eachSetting : monkeySettingsObj.getAllMonkeySettingsName()) {                            if (eachSetting.equalsIgnoreCase(settingName)) {                                try {                                    Field field = monkeySettingsObj.getClass().getDeclaredField(settingName);                                    field.setAccessible(true);                                    inputValue = settingsValue.getText().toString().trim();                                    if (inputValue.equals("")) {                                        field.set(monkeySettingsObj, null);                                        settingsName.setText(" ");                                        return;                                    }                                    field.set(monkeySettingsObj, inputValue);                                } catch (NoSuchFieldException e) {                                    //Log.e("ERROR TAG", "No such field for monkeySettingsObj");                                    CommonTools.alarmToast(getContext(), NO_PARA_WARNING);                                } catch (IllegalAccessException e) {                                    //Log.e("ERROR TAG", "Illegal access field for monkeySettingsObj");                                    CommonTools.alarmToast(getContext(), NO_ACCESS_WARNING);                                }                            }                        }                    }                });                alDia.setNegativeButton(CANCEL_BTN, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        // do nothing                    }                });                alDia.show();            }        });        return oneParaView;    }    private String getSettingValueForObj(String settingName, MonkeySettings monkeySettingsObj) {        for (String eachSettingName : monkeySettingsObj.getAllMonkeySettingsName()) {            try {                if (eachSettingName.equalsIgnoreCase(settingName)) {                    Field field = monkeySettingsObj.getClass().getDeclaredField(settingName);                    field.setAccessible(true);                    if (field.get(monkeySettingsObj) != null && !field.get(monkeySettingsObj).equals("")) {                        return connection + field.get(monkeySettingsObj).toString();                    } else {                        return emptyReturnValue;                    }                }            } catch (NoSuchFieldException e) {                //Log.e("ERROR TAG", "No such field for monkeySettingsObj");                CommonTools.alarmToast(getContext(), NO_PARA_WARNING);            } catch (IllegalAccessException e) {                //Log.e("ERROR TAG", "Illegal access field for monkeySettingsObj");                CommonTools.alarmToast(getContext(), NO_ACCESS_WARNING);            }        }        return emptyReturnValue;    }    private MonkeySettings preLoadRecommendedValue(MonkeySettings monkeySettingsObj) {        // pre-load para values        EVENT_NUMBER = getContext().getResources().getString(R.string.event_number);        SEED_NUMBER = getContext().getResources().getString(R.string.seed_number);        INFORMATION_LEVEL = getContext().getResources().getString(R.string.information_level);        THROTTLE = getContext().getResources().getString(R.string.throttle);        PAC_TOUCH = getContext().getResources().getString(R.string.pct_touch);        PAC_MOTION = getContext().getResources().getString(R.string.pct_motion);        PAC_TRACKBALL = getContext().getResources().getString(R.string.pct_trackball);        PAC_NAV = getContext().getResources().getString(R.string.pct_nav);        PAC_MAJORNAV = getContext().getResources().getString(R.string.pct_majornav);        PAC_SYSKEYS = getContext().getResources().getString(R.string.pct_syskeys);        PAC_APPSWITCH = getContext().getResources().getString(R.string.pct_appswitch);        PAC_ANYEVENT = getContext().getResources().getString(R.string.pct_anyevent);        DBG_NO_EVENT = getContext().getResources().getString(R.string.dbg_no_event);        HPROF = getContext().getResources().getString(R.string.hprof);        IGNORE_CRASHES = getContext().getResources().getString(R.string.ignore_crashes);        IGNORE_TIMEOUT = getContext().getResources().getString(R.string.ignore_timeouts);        IGNORE_SECURITY_EXCEPTIONS = getContext().getResources().getString(R.string.ignore_security_exceptions);        KILL_PROCESS_AFTER_ERROR = getContext().getResources().getString(R.string.kill_process_after_error);        MONITOR_NATIVE_CRASHES = getContext().getResources().getString(R.string.monitor_native_crashes);        WAIT_DBG = getContext().getResources().getString(R.string.wait_dbg);        monkeySettingsObj.setEvent_number(EVENT_NUMBER);        monkeySettingsObj.setSeed_number(SEED_NUMBER);        monkeySettingsObj.setInformation_level(INFORMATION_LEVEL);        monkeySettingsObj.setThrottle(THROTTLE);        monkeySettingsObj.setPct_touch(PAC_TOUCH);        monkeySettingsObj.setPct_motion(PAC_MOTION);        monkeySettingsObj.setPct_trackball(PAC_TRACKBALL);        monkeySettingsObj.setPct_nav(PAC_NAV);        monkeySettingsObj.setPct_majornav(PAC_MAJORNAV);        monkeySettingsObj.setPct_syskeys(PAC_SYSKEYS);        monkeySettingsObj.setPct_appswitch(PAC_APPSWITCH);        monkeySettingsObj.setPct_anyevent(PAC_ANYEVENT);        monkeySettingsObj.setDbg_no_event(DBG_NO_EVENT);        monkeySettingsObj.setHprof(HPROF);        monkeySettingsObj.setIgnore_crashes(IGNORE_CRASHES);        monkeySettingsObj.setIgnore_timeouts(IGNORE_TIMEOUT);        monkeySettingsObj.setIgnore_security_exceptions(IGNORE_SECURITY_EXCEPTIONS);        monkeySettingsObj.setKill_process_after_error(KILL_PROCESS_AFTER_ERROR);        monkeySettingsObj.setMonitor_native_crashes(MONITOR_NATIVE_CRASHES);        monkeySettingsObj.setWait_dbg(WAIT_DBG);        for (String eachSettingName : monkeySettingsObj.getAllMonkeySettingsName()) {            try {                Field field = monkeySettingsObj.getClass().getDeclaredField(eachSettingName);                field.setAccessible(true);                if (field.get(monkeySettingsObj).equals("")) {                    field.set(monkeySettingsObj, null);                }            } catch (NoSuchFieldException e) {                //Log.e("ERROR TAG", "No such field for monkeySettingsObj");                CommonTools.alarmToast(getContext(), NO_PARA_WARNING);            } catch (IllegalAccessException e) {                //Log.e("ERROR TAG", "Illegal access field for monkeySettingsObj");                CommonTools.alarmToast(getContext(), NO_ACCESS_WARNING);            }        }        return monkeySettingsObj;    }}